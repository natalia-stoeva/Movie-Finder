{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\natal\\\\Desktop\\\\movieFinderNEW\\\\public\\\\src\\\\pages\\\\movie\\\\MoviePage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { getDetails } from \"../../controllers/api\";\nimport { Heading } from \"../../components/heading/Heading\";\nimport { RatingsInfo } from \"../../components/ratingsInfo/RatingsInfo\";\nimport { MediaContainer } from \"../../containers/media/MediaContainer\";\nimport { Genre } from \"../../components/genres/Genres\";\nimport { SectionTitle } from \"../../components/section/SectionTitle\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MoviePage = () => {\n  _s();\n  //get the id of the clicked movie\n  const {\n    id\n  } = useParams();\n  console.log(\"movie id is \" + id);\n  const [movie, setMovie] = useState(id);\n  const [cast, setCast] = useState(null);\n  const [videos, setVideos] = useState(null);\n  const [similar, setSimilar] = useState(null);\n  const [genres, setGenres] = useState(null);\n  useEffect(() => {\n    async function getMovieDetails() {\n      const movie = await getDetails(id);\n      const extractGenres = Array.from(movie.genres, genre => genre.name);\n      setGenres(extractGenres);\n      setMovie(movie);\n      setCast(movie.credits.cast);\n      setSimilar(movie.similar.results);\n      setVideos(movie.videos.results);\n    }\n    getMovieDetails();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Heading, {\n      name: movie.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RatingsInfo, {\n      runtime: movie.runtime,\n      status: movie.status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MediaContainer, {\n      posterPath: movie.poster_path,\n      alt: movie.title\n      // videoKey={videos[0].key        }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Genre, {\n      genres: genres\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Heading, {\n      name: movie.tagline\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SectionTitle, {\n      name: \"Top Cast\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this)\n  // <div className=\"container\">\n  //   <Heading name={movie.title} />\n  //   <RatingsInfo runtime={movie.runtime} status={movie.status} />\n  //   <Media posterPath={movie.poster_path} videoKey={videos} />\n\n  //   <div className=\"row\">\n  //     <div className=\"col my-4\">\n  //       {genres ? (\n  //         genres.map((genre) => {\n  //           return <Categorie categorie={genre.name} key={genre.name} />;\n  //         })\n  //       ) : (\n  //         <p>no genres info</p>\n  //       )}\n  //     </div>\n  //   </div>\n\n  //   <Info overview={movie.overview} tagline={movie.tagline} />\n\n  //   <SectionTitle name={\"Top Cast\"} />\n\n  //   <div className=\"row\">\n  //     {cast ? (\n  //       cast.slice(0, 12).map((member) => {\n  //         return (\n  //           <Cast\n  //             key={member.id}\n  //             id={member.id}\n  //             photo={member.profile_path}\n  //             name={member.name}\n  //             character={member.character}\n  //           />\n  //         );\n  //       })\n  //     ) : (\n  //       <p>no cast data</p>\n  //     )}\n  //   </div>\n\n  //   <div className=\"row\">\n  //     <SectionTitle name={\"Similar Movies\"} />\n  //     {similar ? (\n  //       similar.results.map((movie) => {\n  //         return (\n  //           <MovieCart\n  //             key={movie.id}\n  //             title={movie.title}\n  //             id={movie.id}\n  //             poster={movie.poster_path || movie.backdrop_path}\n  //             overview={movie.overview}\n  //             ratings={movie.vote_average}\n  //             populatiry={movie.popularity}\n  //             release={movie.release_date}\n  //           />\n  //         );\n  //       })\n  //     ) : (\n  //       <p>no similar movies</p>\n  //     )}\n  //   </div>\n  // </div>\n  ;\n};\n_s(MoviePage, \"2W1vQ0V91ATj4q2+zu9QDPh+u6U=\", false, function () {\n  return [useParams];\n});\n_c = MoviePage;\nvar _c;\n$RefreshReg$(_c, \"MoviePage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","getDetails","Heading","RatingsInfo","MediaContainer","Genre","SectionTitle","MoviePage","id","console","log","movie","setMovie","cast","setCast","videos","setVideos","similar","setSimilar","genres","setGenres","getMovieDetails","extractGenres","Array","from","genre","name","credits","results","title","runtime","status","poster_path","tagline"],"sources":["C:/Users/natal/Desktop/movieFinderNEW/public/src/pages/movie/MoviePage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { getDetails } from \"../../controllers/api\";\r\nimport { Heading } from \"../../components/heading/Heading\";\r\nimport { RatingsInfo } from \"../../components/ratingsInfo/RatingsInfo\";\r\nimport { MediaContainer } from \"../../containers/media/MediaContainer\";\r\nimport { Genre } from \"../../components/genres/Genres\";\r\nimport { SectionTitle } from \"../../components/section/SectionTitle\";\r\n\r\nexport const MoviePage = () => {\r\n  //get the id of the clicked movie\r\n  const { id } = useParams();\r\n  console.log(\"movie id is \" + id);\r\n\r\n  const [movie, setMovie] = useState(id);\r\n  const [cast, setCast] = useState(null);\r\n  const [videos, setVideos] = useState(null);\r\n  const [similar, setSimilar] = useState(null);\r\n  const [genres, setGenres] = useState(null);\r\n\r\n  useEffect(() => {\r\n    async function getMovieDetails() {\r\n      const movie = await getDetails(id);\r\n      const extractGenres = Array.from(movie.genres, (genre) => genre.name);\r\n      setGenres(extractGenres);\r\n      setMovie(movie);\r\n      setCast(movie.credits.cast);\r\n      setSimilar(movie.similar.results);\r\n      setVideos(movie.videos.results);\r\n    }\r\n    getMovieDetails();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <Heading name={movie.title} />\r\n      <RatingsInfo runtime={movie.runtime} status={movie.status} />\r\n      <MediaContainer\r\n        posterPath={movie.poster_path}\r\n        alt={movie.title}\r\n        // videoKey={videos[0].key        }\r\n      />\r\n      <Genre genres={genres} />\r\n      <Heading name={movie.tagline} />\r\n      \r\n\r\n      <SectionTitle name={\"Top Cast\"} />\r\n\r\n    </div>\r\n    // <div className=\"container\">\r\n    //   <Heading name={movie.title} />\r\n    //   <RatingsInfo runtime={movie.runtime} status={movie.status} />\r\n    //   <Media posterPath={movie.poster_path} videoKey={videos} />\r\n\r\n    //   <div className=\"row\">\r\n    //     <div className=\"col my-4\">\r\n    //       {genres ? (\r\n    //         genres.map((genre) => {\r\n    //           return <Categorie categorie={genre.name} key={genre.name} />;\r\n    //         })\r\n    //       ) : (\r\n    //         <p>no genres info</p>\r\n    //       )}\r\n    //     </div>\r\n    //   </div>\r\n\r\n    //   <Info overview={movie.overview} tagline={movie.tagline} />\r\n\r\n    //   <SectionTitle name={\"Top Cast\"} />\r\n\r\n    //   <div className=\"row\">\r\n    //     {cast ? (\r\n    //       cast.slice(0, 12).map((member) => {\r\n    //         return (\r\n    //           <Cast\r\n    //             key={member.id}\r\n    //             id={member.id}\r\n    //             photo={member.profile_path}\r\n    //             name={member.name}\r\n    //             character={member.character}\r\n    //           />\r\n    //         );\r\n    //       })\r\n    //     ) : (\r\n    //       <p>no cast data</p>\r\n    //     )}\r\n    //   </div>\r\n\r\n    //   <div className=\"row\">\r\n    //     <SectionTitle name={\"Similar Movies\"} />\r\n    //     {similar ? (\r\n    //       similar.results.map((movie) => {\r\n    //         return (\r\n    //           <MovieCart\r\n    //             key={movie.id}\r\n    //             title={movie.title}\r\n    //             id={movie.id}\r\n    //             poster={movie.poster_path || movie.backdrop_path}\r\n    //             overview={movie.overview}\r\n    //             ratings={movie.vote_average}\r\n    //             populatiry={movie.popularity}\r\n    //             release={movie.release_date}\r\n    //           />\r\n    //         );\r\n    //       })\r\n    //     ) : (\r\n    //       <p>no similar movies</p>\r\n    //     )}\r\n    //   </div>\r\n    // </div>\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}